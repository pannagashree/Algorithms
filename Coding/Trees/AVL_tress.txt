// Node is defined as :
#include<stack>
typedef struct node node;
node * insert(node * root,int val)
{
    node* new_node=new node;
    node* temp=root,*X,*Z,*Y,*parent,*t,*t1,*t2;
    int bal_fac,left_ht,right_ht,ht_flag=0;
    stack<node *> nodestk;
    new_node->val=val;
    new_node->left=NULL;
    new_node->right=NULL;
    new_node->ht=0;
    if(root != NULL)
    {
        while(1)
        {
            if(val>temp->val)
            {
                if(temp->right !=NULL)
                {
                    nodestk.push(temp);
                    temp=temp->right;
                }
                else
                {
                    nodestk.push(temp);
                    temp->right=new_node;
                    /*if(temp->left !=NULL)
                        ht_flag=1;*/
                    break;
                }
            }
            else
            {
                if(temp->left!=NULL)
                {
                    nodestk.push(temp);
                    temp=temp->left;
                }
                else
                {
                    nodestk.push(temp);
                    temp->left=new_node;
                    /*if(temp->right !=NULL)
                        ht_flag=1;*/
                    break;
                }
            }
        }
    //while(nodestk.size()!=0)
    while(!nodestk.empty())
    {
        X=nodestk.top();
        nodestk.pop();
        /*if(!ht_flag)
            X->ht+=1;*/
        if( !(X-> right ==NULL) != !(X->left == NULL) )
            X->ht+=1;
        else if((X->ht < X->left->ht+1) || (X->ht < X->right->ht+1))
            X->ht+=1;
        else
            X->ht=X->ht;
        if(X->left == NULL)
            left_ht=0;
        else
            left_ht=X->left->ht+1;
        if(X->right == NULL)
            right_ht=0;
        else
            right_ht=X->right->ht+1;
        bal_fac=left_ht-right_ht;
        if(bal_fac < -1 )    //Right heavy
        {
            if(nodestk.size()!=0)
            {
                parent=nodestk.top();
                nodestk.pop();
            }
            else
                parent=NULL;
            Z = X->right;
           if(Z->left == NULL)
                left_ht=0;
            else
                left_ht=Z->left->ht+1;
            if(Z->right == NULL)
                right_ht=0;
            else
                right_ht=Z->right->ht+1;
            bal_fac=left_ht-right_ht;
            if(bal_fac <=0)
            {
                //Right-Right situation - Left Rotation
                t=Z->left;
                X->right=t;
                Z->left=X;
                if(bal_fac==0)
                {
                    if(t!=NULL)		/*This covers left rotation with childen also*/
                        X->ht=t->ht+1;
                    else
                        X->ht=1;
                }
                else
                {
                    if(t!=NULL)
                        X->ht=t->ht+1;
                    else
                        X->ht=0;
                }
                Z->ht=(X->ht)+1;
                if(parent != NULL)
                {
                    if(X->val < parent->val)
                        parent->left = Z;
                    else
                        parent->right = Z;
                }
                else
                    root=Z;
                return root;
            }
            else if(bal_fac == 1)
            {
                //Right-left situation 
                Y = Z->left;
                if(Y->left == NULL)
                    left_ht=0;
                else
                    left_ht=Y->left->ht+1;
                if(Y->right == NULL)
                    right_ht=0;
                else
                    right_ht=Y->right->ht+1;
                bal_fac=left_ht-right_ht;
                t1=Y->right;
                Z->left=t1;
                Y->right=Z;
                t2 = Y->left;
                X->right = t2;
                Y->left=X;
                if(bal_fac < 0)
                {
                    X->ht = 1;
                    Z->ht = 0;
                    Y->ht=X->ht+1;
                }
                else if (bal_fac == 0)
                {
                    X->ht = 0;
                    Z->ht = 0;
                    Y->ht=X->ht+1;
                }
                else
                {
                    X->ht = 0;
                    Z->ht = 1;
                    Y->ht=Z->ht+1;
                }
                if(parent != NULL)
                {
                    if(X->val < parent->val)
                        parent->left = Y;
                    else
                        parent->right = Y;
                }
                else
                    root = Y;
                return root;
            }
            else
                return root;        
        }
        if(bal_fac > 1)    //Left heavy
        {
            if(nodestk.size()!=0)
            {
                parent=nodestk.top();
                nodestk.pop();
            }
            else
                parent=NULL;
            Z = X->left;
            if(Z->left == NULL)
                left_ht=0;
            else
                left_ht=Z->left->ht+1;
            if(Z->right == NULL)
                right_ht=0;
            else
                right_ht=Z->right->ht+1;
            bal_fac=left_ht-right_ht;
            if(bal_fac >= 0)
            {
                //Left-left situation - Right Rotation
                t=Z->right;
                X->left=t;
                Z->right=X;
                if(bal_fac==0)
                {
                    if(t!=NULL)			/*This covers right rotation with childen also*/
                        X->ht=t->ht+1;
                    else
                        X->ht=1;
                }
                else
                {
                    if(t!=NULL)
                        X->ht=t->ht+1;
                    else
                        X->ht=0;
                }
                Z->ht=(X->ht)+1;
                if(parent != NULL)
                {
                    if(X->val < parent->val)
                        parent->left = Z;
                    else
                        parent->right = Z;
                }
                else
                    root=Z;
                return root;
            }
            else if (bal_fac == -1)
            {
                //Left- Right situation
                Y = Z->right;
                if(Y->left == NULL)
                    left_ht=0;
                else
                    left_ht=Y->left->ht+1;
                if(Y->right == NULL)
                    right_ht=0;
                else
                    right_ht=Y->right->ht+1;
                bal_fac=left_ht-right_ht;
                t1 = Y->left;
                Z->right = t1;
                Y->left = Z;
                t2 = Y->right;
                X->left = t2;
                Y->right = X;
                if(bal_fac < 0)
                {
                    X->ht = 1;
                    Z->ht = 0;
                    Y->ht=X->ht+1;
                }
                else if (bal_fac == 0)
                {
                    X->ht = 0;
                    Z->ht = 0;
                    Y->ht=X->ht+1;
                }
                else
                {
                    X->ht = 0;
                    Z->ht = 1;
                    Y->ht=Z->ht+1;
                }
                if(parent != NULL)
                {
                    if(X->val < parent->val)
                        parent->left = Y;
                    else
                        parent->right = Y;
                }
                else
                    root = Y;
                return root;
            }
            else
            {
                return root;
            }
        }
    }
    return root;
        
   }
    else
    {
        root=new_node;
        root->ht=0;
        return root;
    }
}